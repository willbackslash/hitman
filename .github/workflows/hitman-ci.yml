name: CI

on: [push]

jobs:

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: ['5432:5432']
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry lock
          poetry export -f requirements.txt --without-hashes --dev > requirements.txt
          python -m pip install -r requirements.txt
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Test with black
        run: |
          python -m black --check .
      - name: Test with pytest
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'
          SECRET_KEY: 'some-secret-key'
          DEBUG: 'true'
          APP_ENVIRONMENT: 'development'
          ALLOWED_HOSTS: '*'
          CORS_ORIGIN_WHITELIST: 'http://*'
        run: |
          python manage.py test

  buildAndTest:
    name: React app build and test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hitman-ui
    steps:
      - uses: actions/checkout@v1

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test --watchAll=false
